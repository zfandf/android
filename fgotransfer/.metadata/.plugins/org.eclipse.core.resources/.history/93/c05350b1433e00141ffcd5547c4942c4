package cn.m15.app.android.gotransfer.net.httpserver;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.Map;

import org.json.JSONException;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.BitmapFactory;
import android.media.ThumbnailUtils;
import cn.m15.app.android.gotransfer.net.httpserver.NanoHTTPD.Response;
//import android.graphics.Bitmap;
//import android.graphics.Bitmap.CompressFormat;
//import android.graphics.BitmapFactory;
//import android.media.ThumbnailUtils;

public class ImageServeAction extends ServeAction {

	private static final int THUMBNAIL_SIZE = 120;
	private static final int THUMBNAIL_QULITY = 60;
	
	private static ByteArrayOutputStream baos;

	@Override
	protected Response response(Context mContext, Map<String, String> params,
			Map<String, String> files) throws JSONException {
		String path = params.get("path");
		String isThumb = params.get("is_thumb");
		if (null != path) {
			InputStream fis = null;
			long length = 0;
			try {
				if (isThumb.equals("1")) {
					ByteArrayOutputStream baos = generateCenteredThumbnail(path, mContext);
					length = baos.toByteArray().length;
					fis = new ByteArrayInputStream(baos.toByteArray());
				} else {
					fis = new FileInputStream(path);
					length = new File(path).length();
				}
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
			
			Response response = new Response(Response.Status.OK, "image/jpeg",
					fis);
			response.addHeader("Content-Length", "" + length);
			return response;
		}
		return null;
	}

	private ByteArrayOutputStream generateCenteredThumbnail(String path, Context mContext) {
		
//		ByteArrayOutputStream baos = new ByteArrayOutputStream();
//		LocalImageFetcher imageFetcher = ImageUtil.createLocalImageFetcher(mContext, THUMBNAIL_SIZE);
//		imageFetcher.downloadLocalImage(path, baos);
		
		int targetWidth = THUMBNAIL_SIZE;
		Bitmap image = BitmapFactory.decodeFile(path);
		double scale = image.getWidth() / image.getHeight();
		image = ThumbnailUtils.extractThumbnail(image, targetWidth,
				(int) (targetWidth / scale));
		baos = new ByteArrayOutputStream();
		image.compress(CompressFormat.JPEG, THUMBNAIL_QULITY, baos);
		
		return baos;
	}
}
